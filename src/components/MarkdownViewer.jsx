import React, { useState, useEffect } from "react";
import { getMarkdownContent } from "../services/notesService.js";

const MarkdownViewer = ({ notePublicId, isOpen, onClose }) => {
  const [markdownContent, setMarkdownContent] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    if (isOpen && notePublicId) {
      fetchMarkdownContent();
    }
  }, [isOpen, notePublicId]);

  const fetchMarkdownContent = async () => {
    try {
      setLoading(true);
      setError("");
      const response = await getMarkdownContent(notePublicId);
      setMarkdownContent(response.markdown_content);
    } catch (error) {
      setError("Failed to load markdown content");
      console.error("Error fetching markdown:", error);
    } finally {
      setLoading(false);
    }
  };

  const renderMarkdown = (content) => {
    // Basic markdown rendering - you might want to use a library like marked.js or react-markdown
    return content
      .replace(/^### (.*$)/gim, "<h3>$1</h3>")
      .replace(/^## (.*$)/gim, "<h2>$1</h2>")
      .replace(/^# (.*$)/gim, "<h1>$1</h1>")
      .replace(/\*\*(.*)\*\*/gim, "<strong>$1</strong>")
      .replace(/\*(.*)\*/gim, "<em>$1</em>")
      .replace(/\n/gim, "<br>")
      .replace(/\$\$(.*?)\$\$/gim, '<div class="math-block">$1</div>')
      .replace(/\$(.*?)\$/gim, '<span class="math-inline">$1</span>');
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="flex justify-between items-center p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">
            AI-Generated Content
          </h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 text-2xl"
          >
            Ã—
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-auto p-6">
          {loading && (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-3 text-gray-600">Loading content...</span>
            </div>
          )}

          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}

          {!loading && !error && markdownContent && (
            <div className="prose prose-lg max-w-none">
              <div
                className="markdown-content"
                dangerouslySetInnerHTML={{
                  __html: renderMarkdown(markdownContent),
                }}
              />
            </div>
          )}

          {!loading && !error && !markdownContent && (
            <div className="text-center py-8 text-gray-500">
              No markdown content available
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="border-t border-gray-200 p-6 bg-gray-50">
          <div className="flex justify-between items-center">
            <p className="text-sm text-gray-600">
              Content generated by Google Gemini 2.0 Flash AI
            </p>
            <div className="flex gap-3">
              <button
                onClick={() => {
                  // Copy to clipboard
                  navigator.clipboard.writeText(markdownContent);
                }}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors"
              >
                Copy Text
              </button>
              <button
                onClick={onClose}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        .markdown-content h1 {
          font-size: 2rem;
          font-weight: bold;
          margin-bottom: 1rem;
          color: #1f2937;
        }
        .markdown-content h2 {
          font-size: 1.5rem;
          font-weight: bold;
          margin-bottom: 0.75rem;
          color: #374151;
        }
        .markdown-content h3 {
          font-size: 1.25rem;
          font-weight: bold;
          margin-bottom: 0.5rem;
          color: #4b5563;
        }
        .math-block {
          background: #f3f4f6;
          padding: 1rem;
          margin: 1rem 0;
          border-radius: 0.5rem;
          font-family: monospace;
          text-align: center;
        }
        .math-inline {
          background: #e5e7eb;
          padding: 0.25rem 0.5rem;
          border-radius: 0.25rem;
          font-family: monospace;
        }
      `}</style>
    </div>
  );
};

export default MarkdownViewer;
